#       probed.conf - probed config file
#
# Access section
# by default, access to probed is denied to all hosts. Hostnames, domains,
# specific ip addresses and ip address ranges may all be permitted specifically.
# This should change to a secured method as soon as possible.
#
# access [ip address,hostname,zone] [permit,deny]
#

allow 127.0.0.1             # Allow specific IP address
#allow localhost             # Allow hostname
allow 204.130.216.0/24  # Allow IP address range
allow 192.168.1.1          # Allow specific host
allow example.com       # Allows all hosts in example.com

#
# debugging level. Default is 0, 9 is max.
#
debug_level=4

#
# listen (bind) addresses
# listen [address] [port]
#
listen 0.0.0.0 10665

#
# session timeout
# session_timeout [sec]
# default is 15 seconds
#
session_timeout 15

#
# user to run daemon as
# default is nobody
#
user=voodoo

#
# pid_file specifies the file to write daemon process id.
#
pid_file /tmp/probed.pid


#
# logfile
# if unspecified, defaults to /var/log/probed
#
logfile=/tmp/probed_log

#
# history file
# where to place the history file.
#
history_file=/tmp/probed.hx

packets=10              #if unspecified, default to 10
max_packets=300  #maximum number of packets. If unspecified, 10

#
# type of query to use (ping or connection to TCP ECHO port)
# type=[ICMP,ECHO]
#
type=ICMP


#
# wait no longer than timeout ms for a packet to return
# timeout=[ms]
#
timeout=300

echo_string='probed'    #The string used when testing with the echo port

#
# Tunable parameters
#

excellent=5
good=4
fair=3
poor=2
#bad=1

latency_excellent=(0,50)               # 0- 50 ms
latency_good=(51,100)          # 51- 100ms
latency_fair=(101,300)         # 101 - 300ms
latency_poor=(301,0)                   #  > 301 ms

jitter_excellent       =(0,10)                 # 0-10ms
jitter_good=(11,20)                    # 11 - 20ms
jitter_fair=(21,50)                    # 21 - 50 ms
jitter_poor=(51,0)                     # > 51 ms

loss_excellent=(0,0.50)                # 0 - 0.5%
loss_good0(0.51, 1.5)                  # 0.5-1.5%
loss_fair=(1.51,2.00)                  # 1.5-2%
loss_poor=(2.01,0)                     # >2%

#################### SSL configuration ##############################

<SSLConf>

#
# SSL Cipher Suite:
# List the ciphers that the client is permitted to negotiate.
# See documentation for a complete list.
#
SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL

#
# Server Certificate:
# Point SSLCertificateFile at a PEM encoded certificate.  If
# the certificate is encrypted, you will be asked for a password phrase
#
SSLCertificateFile ${PWD}/conf/ssl.crt/server.crt

#
# Server Private Key:
# If the key is not combined with the certificate, use this
# directive to point at the key file.  Keep in mind that if
# you've both a RSA and a DSA private key you can configure
# both in parallel (to also allow the use of DSA ciphers, etc.)
#
SSLCertificateKeyFile ${PWD}/conf/ssl.key/server-nopass.key

# Certificate Authority (CA):
# Set the CA certificate verification path where to find CA
# certificates for client authentication or alternatively one
# huge file containing all of them (file must be PEM encoded)
# Note: Inside SSLCACertificatePath you need hash symlinks
#         to point to the certificate files. Use the provided
#         Makefile to update the hash symlinks after changes.
SSLCACertificatePath ${PWD}/conf/ssl.ca
SSLCACertificateFile ${PWD}/conf/ssl.ca/ca-bundle.crt

#
# Client Authentication (Type):
# Client certificate verification type and depth.  Types are
# none, optional and require.  Depth is a
# number which specifies how deeply to verify the certificate
# issuer chain before deciding the certificate is not valid.
#
SSLVerifyClient none
SSLVerifyDepth  10

</SSLConf>

##############################################################

#
# EOF


