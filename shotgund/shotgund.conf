#
# shotgund - an asynchronous, parallel, domain-swapping DNS daemon
#
# example config file v1.0
#  2005-05-18

#
#
# Run with debug level 1 as default.  This value can be overridden by
#  the command line.
#
debug 4

# Fast (async poll() ) or slow (many small poll() ) queries.
# With fast queries, only log at the end of a group.  With slow queries, timestamp logging per thread (per resolver.)
#
# default is to use fast poll() (async_query on)
# async_query [on/off]
#

async_query on

#
# debug_file specifies the file to write out the debug information.
#  This value can be overridden by the command line.  If run in the
#  foreground, debug data will be appended to both stdout and this file.
#
debug_file /tmp/shotgund_log
#
# pid_file specifies the file to write daemon process id.
#
pid_file /tmp/shotgund.pid
#
#
# Syslog output.  If specified, will copy output to syslog with this
#  message flag.  Default is to not send syslog messages.
#
# syslog_level local1.debug
#
#
# What user should the daemon run as after launch?  This user takes over
#  after all root-level activity (socket creation, etc) has been completed.
#
user voodoo
#
#
# listen (bind) addresses
# listen [address] [port]
#

listen * 1054
listen 127.0.0.1 1053

#
#
# include additional configuration files here
# NOTE: includes are processes at the end of main file processing
#
include my-group-e164-arpa.conf


#
#
#
# Which domains do we want to rip apart and handle in specific ways?
#  We first look at the IP address of the device that is sending
#  the query.  If it matches one or more lines, then see if it
#  matches the top-level zone that is being requested.  If there
#  is a match, and a "permit", then strip off the zone from the
#  query, and hand off to the groups specified in the list of
#  groups after the "permit" keyword, in the order the groups
#  are listed.
#
# Denied lookups are not given any response at all (this aids in
#  debugging, and prevents confusing results)
#
# Wildcards can be used for domains or IP addresses (limited)
#   * = any string or number, 1 or more characters
#
# Rules are interpreted in order of entry, and the first match
#  ends the lookup process.
#
# If no group(s) is specified, then hand off resolution to the
#  default-forwarder resolver(s).
#
# host [ip address] [zone suffix] [RR type] [permit,deny] [group-name|resolvers-name, group-name|resolvers-name, ...] [options]
#
# In this example, we want to do a search on group 1 domains/resolvers
#  first, then go to group 2 if group 1 does not have any valid replies.
#
host 127.0.0.1 foo.com NAPTR permit my-group 1 20 i
host 127.0.0.1 * NAPTR permit my-group 1 20 i
host 127.0.0.1 foo.com MX deny

#
#

forwarder 20 216.239.38.10  53 800
forwarder 20 217.20.160.161 53 700

#
#
#
#
# So here is where we fork the queries for a particular group.
# The daemon cuts off the suffix of the original query (that suffix
#  is indicated in the "host" line, above) and then tacks on
#  the suffix in the "zone" lines below.  If an answer comes
#  back from one of the lookups, then the NAPTR is given back
#  to the querying host. #
# Group 1
#
# Group 1 is for my internal e164 zones, which have their own
#  resolvers and speed assumptions.
#
#  forwarder [group] [ip address] [port]
#
forwarder 1 10.10.10.4 53
forwarder 1 10.10.22.9 53
#
# zone [group] [zone] [weight] [max ms wait] [resolvers-name]
#
zone 1 e164.mycompany.com.       1 50 1
zone 1 e164.myothercompany.com  1 70 1
#
#
#
# Group 2
#
# If all the resolvers in group 1 don't come back with any valid
#  answers after 70ms, then we move on to group 2, which is external
#  zones and "outside" resolvers...
#
#  forwarder [group] [ip address] [port]
#
forwarder my-group 64.71.188.230  53
forwarder my-group 12.39.113.5 53
#forwarder 1 217.20.160.161 53

#
# zone [group] [zone] [weight] [max ms wait]
#
zone my-group e164.info 2 270 my-group
zone my-group e164.org  3 200 my-group
#

forwarder 3 216.239.38.10  53
forwarder 3 217.20.160.161 53

zone 3 e164.arpa 40 500 3
zone 3 e299.ajhj 20 100 3

# end
